
@{
    ViewBag.Title = "Index";
}

<h2>Quick app to try to make sense of my newfeed, with a bit of sorting. </h2>

<p>If you're not logged in, click the Login button below to attach this app to your facebook account. </p>

<script>
    // This is called with the results from from FB.getLoginStatus().
    function statusChangeCallback(response) {
        console.log('statusChangeCallback');
        console.log(response);
        // The response object is returned with a status field that lets the
        // app know the current login status of the person.
        // Full docs on the response object can be found in the documentation
        // for FB.getLoginStatus().
        if (response.status === 'connected') {
            // Logged into your app and Facebook.
            testAPI();
        } else if (response.status === 'not_authorized') {
            // The person is logged into Facebook, but not your app.
            document.getElementById('status').innerHTML = 'Please log ' +
              'into this app.';
            document.getElementById('buttonGetFeed').disabled = true;
        } else {
            // The person is not logged into Facebook, so we're not sure if
            // they are logged into this app or not.
            document.getElementById('status').innerHTML = 'Please log ' +
              'into Facebook.';
            document.getElementById('buttonGetFeed').disabled = true;
        }
    }

    // This function is called when someone finishes with the Login
    // Button.  See the onlogin handler attached to it in the sample
    // code below.
    function checkLoginState() {
        FB.getLoginStatus(function (response) {
            statusChangeCallback(response);
        });
    }

    window.fbAsyncInit = function () {
        FB.init({
            appId: '426833590733307',
            cookie: true,  // enable cookies to allow the server to access
            // the session
            xfbml: true,  // parse social plugins on this page
            version: 'v2.3' // use graph api version 2.5
        });

        // Now that we've initialized the JavaScript SDK, we call
        // FB.getLoginStatus().  This function gets the state of the
        // person visiting this page and can return one of three states to
        // the callback you provide.  They can be:
        //
        // 1. Logged into your app ('connected')
        // 2. Logged into Facebook, but not your app ('not_authorized')
        // 3. Not logged into Facebook and can't tell if they are logged into
        //    your app or not.
        //
        // These three cases are handled in the callback function.

        FB.getLoginStatus(function (response) {
            statusChangeCallback(response);
        });

    };

    // Load the SDK asynchronously
    (function (d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/sdk.js";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));

    // Here we run a very simple test of the Graph API after login is
    // successful.  See statusChangeCallback() for when this call is made.
    function testAPI() {
        console.log('Welcome!  Fetching your information.... ');
        FB.api('/me', function (response) {
            console.log('Successful login for: ' + response.name);
            document.getElementById('status').innerHTML =
              'Thanks for logging in, ' + response.name + '!';
            document.getElementById('buttonGetFeed').disabled = false; 
        });
    }

    function getFeed() {
        FB.api('me/home?fields=icon,from,story,permalink_url,picture,description',
            function(response) {
                // Create table.
                var table = document.createElement('table');
                var div = document.getElementById('results');
                div.appendChild(table);
                var headerRow = table.insertRow(0);
                headerRow.insertCell(0).innerHTML = "story";
                headerRow.insertCell(0).innerHTML = "description";
                console.log(response);
                for (var i = 0; i < response.data.length; i++) {
                    var post = response.data[i];
                    var row = table.insertRow(i+1);
                    row.insertCell(0).innerHTML = post.story || ' ';
                    row.insertCell(1).innerHTML = post.description || ' ';
                }
            });
    }
</script>

<!--
  Below we include the Login Button social plugin. This button uses
  the JavaScript SDK to present a graphical Login button that triggers
  the FB.login() function when clicked.
-->

<fb:login-button scope="public_profile,email,user_posts,read_stream" onlogin="checkLoginState();">
</fb:login-button>

<div>
    Facebook connection status: <span id="status" />
</div>

<div>
    <button id="buttonGetFeed" disabled="disabled" onclick="getFeed()">Get Feed!</button>
</div>

<div id="results">
    Results go here.
</div>
